---

- setup:
  delegate_to: '{{ jumphost }}'

- set_fact:
    dir_root: /mnt/root


- name: create mountpoint for system installation
  file: dest={{ dir_root }} state=directory
  delegate_to: '{{ jumphost }}'

- set_fact:
    # discover all devices ansible can find
    # those will get wiped. don't say i didn't warn you
    devices: '{{ ansible_devices|dict2list("device")|rejectattr("sectors","equalto","0")|map(attribute="device")|format_list("/dev/%s") }}'

- set_fact:
    parttable_dump=files/sfdisk.boot+root+lvm
- set_fact:
    parttable_dump=files/sfdisk.boot+lvm
  when: USE_lvm|default(false)|bool

- name: copy partition table dump
  copy: src={{ parttable_dump }} dest=/tmp/parttable_dump
  delegate_to: '{{ jumphost }}'

- when: not USE_raid|default(true)|bool
  block:
    - name: die if there're more than one device in non-raid setups
      assert:
        that:
          - '{{ devices|length }} == 1'
    - set_fact:
        dev_boot: ' {{ devices[0] }}1'
        dev_root: ' {{ devices[0] }}2'

- name: partition devices
  shell: 'sfdisk -L {{ item }} < /tmp/parttable_dump'
  delegate_to: '{{ jumphost }}'
  with_items: '{{ devices }}'

- when: USE_raid|default(true)|bool
  block:
    - set_fact:
        dev_boot: '/dev/md/boot'
        dev_root: '/dev/md/root'

    - name: remove old raid superblocks from partitions
      shell: mdadm --zero-superblock {{ item }}
      delegate_to: '{{ jumphost }}'
      with_items: '{{ devices|format_list("%s1") }}'
    - name: remove old raid superblocks from partitions
      shell: mdadm --zero-superblock {{ item }}
      delegate_to: '{{ jumphost }}'
      with_items: '{{ devices|format_list("%s2") }}'

    - name: create 'boot' raid device
      shell: 'mdadm --create /dev/md3 --raid-devices={{ devices|length }} --level=1 --bitmap=internal --name=boot {{ devices|format_list("%s1")|join(" ") }} --metadata=1.2'
      delegate_to: '{{ jumphost }}'
    - name: create 'root' raid device
      shell: 'mdadm --create /dev/md4 --raid-devices={{ devices|length }} --level=1 --bitmap=internal --name=root {{ devices|format_list("%s2")|join(" ") }} --metadata=1.2'
      delegate_to: '{{ jumphost }}'

    # restart mdadm so that udev devices get created.
    # XXX perhaps that can be avoided with --auto=p or something above?
    - command: 'mdadm --stop {{ item }}'
      delegate_to: '{{ jumphost }}'
      with_items: [ "/dev/md3", "/dev/md4" ]
    - shell: sed /ARRAY/d -i /etc/mdadm/mdadm.conf
      delegate_to: '{{ jumphost }}'
    - shell: mdadm --examine --scan >> /etc/mdadm/mdadm.conf
      delegate_to: '{{ jumphost }}'
    - shell: mdadm --assemble --scan
      failed_when: false
      delegate_to: '{{ jumphost }}'
    - set_fact:
        extra_packages: ',mdadm{{ extra_packages | default("") }}'

- name: format boot partition
  command: 'mkfs.ext3 -L boot {{ dev_boot }}'
  delegate_to: '{{ jumphost }}'

- when: USE_encryption|default(false)|bool
  block:
    #- file: path=/lib/cryptsetup/passfifo state=fifo
    - shell: rm -rf /tmp/cryptkey ; mkfifo /tmp/cryptkey
      delegate_to: '{{ jumphost }}'

    # run this command in the background, but check later
    - shell: cryptsetup luksFormat {{ dev_root }} --key-file /tmp/cryptkey
      async: 1000
      poll: 0
      register: cryptsetup
      delegate_to: '{{ jumphost }}'


    - shell: 'echo {{ secret_root_luks }} > /tmp/cryptkey'
      delegate_to: '{{ jumphost }}'

    - name: "wait for cryptsetup"
      async_status: 'jid={{ cryptsetup.ansible_job_id }}'
      register: job_result
      until: job_result is defined and job_result.finished is defined and job_result.finished
      retries: 30
      delegate_to: '{{ jumphost }}'


    # run this command in the background, but check later
    - shell: cryptsetup luksOpen {{ dev_root }} crypt_root --key-file /tmp/cryptkey
      async: 1000
      poll: 0
      register: cryptsetup
      delegate_to: '{{ jumphost }}'

    - shell: 'echo {{ secret_root_luks }} > /tmp/cryptkey'
      delegate_to: '{{ jumphost }}'

    - name: "wait for cryptsetup"
      async_status: 'jid={{ cryptsetup.ansible_job_id }}'
      register: job_result
      until: job_result is defined and job_result.finished is defined and job_result.finished
      retries: 30
      delegate_to: '{{ jumphost }}'

    # Switch root/crypt devices
    - set_fact:
        dev_crypt: '{{ dev_root }}'
    - set_fact:
        dev_root: /dev/mapper/crypt_root
    - set_fact:
        extra_packages: ",cryptsetup,busybox,dropbear-initramfs"

- when: USE_lvm|default(false)|bool
  block:
    - command: pvcreate {{ dev_root }}
      delegate_to: '{{ jumphost }}'
    - command: vgcreate vg {{ dev_root }}
      delegate_to: '{{ jumphost }}'
    - command: lvcreate -L 16g -n root vg
      delegate_to: '{{ jumphost }}'
    - set_fact:
        dev_root: /dev/vg/root
        extra_packages: ',lvm2{{ extra_packages | default("") }}'
- name: format root volume
  command: mkfs.ext4 -E stride=16384,stripe-width=16384,lazy_itable_init -L root {{ dev_root }}
  delegate_to: '{{ jumphost }}'

- name: mount root file system
  command: mount {{ dev_root }} {{ dir_root }}
  delegate_to: '{{ jumphost }}'

- command: mkdir {{ dir_root }}/boot
  delegate_to: '{{ jumphost }}'

- command: mount {{ dev_boot }} {{ dir_root }}/boot
  delegate_to: '{{ jumphost }}'
